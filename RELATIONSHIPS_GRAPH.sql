CREATE COLUMN TABLE "SHOWCASEHDI"."PERSONS"(
	"ID" BIGINT CS_FIXED NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"NAME" NVARCHAR(1000),
	"INFECTED" INT,
	"INFECTED_DATE" TIMESTAMP,
	PRIMARY KEY (
		"ID"
	)
) UNLOAD PRIORITY 5 AUTO MERGE;

select * from "SHOWCASEHDI"."PERSONS"


CREATE COLUMN TABLE "SHOWCASEHDI"."RELATIONSHIPS"(
	"ID" BIGINT CS_FIXED NOT NULL GENERATED BY DEFAULT AS IDENTITY,
	"PERSON_1" BIGINT NOT NULL,
	"PERSON_2" BIGINT NOT NULL,
	"KINSHIP" NVARCHAR(500),
	PRIMARY KEY ( 
		"ID"
	)
) UNLOAD PRIORITY 5 AUTO MERGE;
ALTER TABLE "SHOWCASEHDI"."RELATIONSHIPS" ADD FOREIGN KEY ( "PERSON_1" ) REFERENCES "SHOWCASEHDI"."PERSONS" ("ID") ON UPDATE RESTRICT ON DELETE RESTRICT;
ALTER TABLE "SHOWCASEHDI"."RELATIONSHIPS" ADD FOREIGN KEY ( "PERSON_2" ) REFERENCES "SHOWCASEHDI"."PERSONS" ("ID") ON UPDATE RESTRICT ON DELETE RESTRICT;




CREATE GRAPH WORKSPACE "SHOWCASEHDI"."GRAPH_RELATIONSHIPS"
 EDGE TABLE "SHOWCASEHDI"."RELATIONSHIPS"
 	SOURCE COLUMN "PERSON_1" 
 	TARGET COLUMN "PERSON_2" 
 	KEY COLUMN "ID" 
VERTEX TABLE "SHOWCASEHDI"."PERSONS"
	KEY COLUMN "ID" 
;

CREATE SEQUENCE "SHOWCASEHDI"."SEQ_RELATIONSHIPS" START WITH 1 INCREMENT BY 1;

CREATE PROCEDURE RELATIONSHIP_INSERT(out RESULT INT) LANGUAGE SQLSCRIPT
AS
I INT :=0;
BEGIN
	DECLARE AMOUNT DOUBLE = RAND()*100000+1;
	DECLARE OFFSETNUM INTEGER = ROUND(RAND()*50+1);
    DECLARE PERSON_1 INTEGER = 0;
    DECLARE PERSON_2 INTEGER = 0;
    DECLARE REL INTEGER = 0;
    SELECT "ID" INTO PERSON_1 FROM "SHOWCASEHDI"."PERSONS" LIMIT 1 OFFSET :OFFSETNUM;
    OFFSETNUM = ROUND(RAND()*1000+1);
    SELECT "ID" INTO PERSON_2 FROM "SHOWCASEHDI"."PERSONS" LIMIT 1 OFFSET :OFFSETNUM;
    FOR i IN 1..3 DO
    	INSERT INTO "SHOWCASEHDI"."RELATIONSHIPS"("ID","PERSON_1","PERSON_2","KINSHIP") VALUES ("SHOWCASEHDI"."SEQ_RELATIONSHIPS".NEXTVAL,:PERSON_1,:PERSON_2,
            (SELECT CASE ROUND(RAND()*5+1)
                    WHEN 1 THEN 'Friends' 
                    WHEN 2 THEN 'Couple' 
                    WHEN 3 THEN 'Mother' 
                    WHEN 4 THEN 'Father'
                    WHEN 5 THEN 'Grandfather'
                    WHEN 6 THEN 'Grandmother'
                    ELSE 'Colleagues'
            END AS type
            FROM DUMMY 
            )
        );
        PERSON_1 = :PERSON_2;
        OFFSETNUM = ROUND(RAND()*1000+1);
        SELECT "ID" INTO PERSON_2 FROM "SHOWCASEHDI"."PERSONS" LIMIT 1 OFFSET :OFFSETNUM;
    END FOR;
    SELECT COUNT(*) INTO RESULT FROM "SHOWCASEHDI"."RELATIONSHIPS";
END;


CALL RELATIONSHIP_INSERT(?);

SELECT * FROM "SHOWCASEHDI"."RELATIONSHIPS";




-- CYPHER STATEMENT
MATCH (vertex1)-[edge]->(vertex2), (vertex3)-[edge2]->(vertex4)
WHERE edge.AMOUNT > edge2.AMOUNT and edge.DELIVERY_ID = edge2.DELIVERY_ID
RETURN edge.PRODUCT AS type
ORDER BY edge.COST ASC

